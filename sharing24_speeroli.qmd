---
title: "sharing_speeroli"
author: "Oliver Speer"
editor: source
lang: de
language: 
  title-block-author-single: "Autor:"
  title-block-published: "Version vom:"
date: "`r Sys.Date()`"
format:
  html:
    embeded-resources: true
    theme: cosmo
    
---

```{r setup, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(GGally)
load("sharing_2024.rda")

```


# Einführung

# Problemstellung und Lösungsansatz

# Deskriptive Datenanalyse
```{r echo=FALSE, message=FALSE, warning=FALSE}
glimpse(sharing)

sharing |> 
  select(user, temp, regen, feiertag) |>
  summary()

sharing |> 
  select(user, temp, regen, feiertag) |>
  ggpairs( aes(color = feiertag),
           lower = list(continuous = "cor"),
           upper = list(continuous = "points")#,
#           diag = list(continuous = "barDiag")
  )

sharing |> 
  # mutate(stunde = as.factor(stunde)) |>
  # group_by(wochentag) |>
  select(user, temp, regen, stunde, wochentag) |>
  ggpairs( aes(color = wochentag),
           #lower = list(continuous = "cor"),
           upper = list(continuous = "points")#,
#           diag = list(continuous = "barDiag")
  )
```


```{r echo=FALSE, message=FALSE, warning=FALSE}
sharing |> 
  select(user, temp) |> 
  ggplot(aes(x = user)) +
  geom_histogram(fill = "lightblue", color = "black", binwidth = 1) +
  labs(title = "Verteilung der Nutzerzahlen",
       x = "Nutzer",
       y = "Häufigkeit")+
  theme_minimal()
```


```{r echo=FALSE, message=FALSE, warning=FALSE}
p <- sharing |> 
  group_by(wochentag) |>
  na.omit() |>
  ggplot(aes(x = wochentag)) +
  geom_boxplot(aes(y = user, colour = feiertag)) +
  labs(title = "Nutzerzahlen nach Wochentag",
       x = "Wochentag",
       y = "Nutzer")+
  theme_minimal()
p
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
sharing |> 
  mutate(stunde = as.factor(stunde)) |>
  group_by(wochentag) |>
  na.omit() |>
  ggplot(aes(x = wochentag)) +
  geom_boxplot(aes(y = user, colour = stunde)) +
  labs(title = "Nutzerzahlen nach Wochentag",
       x = " ",
       y = "Nutzer")+
  theme_minimal()

```

```{r echo=FALSE, message=FALSE, warning=FALSE}
sharing |> 
  mutate(stunde = as.factor(stunde)) |>
  group_by(stunde) |>
  na.omit() |>
  ggplot(aes(x = stunde)) +
  geom_boxplot(aes(y = user, colour = wochentag)) +
  labs(title = "Nutzerzahlen nach Tageszeit",
       x = "Uhrzeit",
       y = "Nutzer")+
  theme_minimal()

```

```{r echo=FALSE, message=FALSE, warning=FALSE}
# ggplot user over temp coloured by wochentag
p <- sharing |> 
  ggplot(aes(x = temp, y = user)) +
  geom_point() +
  labs(title = "Nutzerzahlen über Temperatur",
       x = "Temperatur",
       y = "Nutzer")+
  theme_minimal()
p


```

```{r echo=FALSE, message=FALSE, warning=FALSE}
# ggplot user over regen coloured by wochentag
p <- sharing |> 
  ggplot(aes(x = regen, y = user)) +
  geom_point() +
  labs(title = "Nutzerzahlen über Regen",
       x = "Regen [mm/h]",
       y = "Nutzer")+
  theme_minimal()
p


```

```{r echo=FALSE, message=FALSE, warning=FALSE}
# ggplot user over regen coloured by wochentag
p <- sharing |> 
  #group_by(tag) |>
  #summarise(user = sum(user)) |>
  ggplot(aes(x = tag, y = user)) +
  geom_point() +
  labs(title = "Nutzerzahlen über tag",
       x = "tag",
       y = "Nutzer")+
  theme_minimal()
p


```

```{r echo=FALSE, message=FALSE, warning=FALSE}
p <- sharing |> 
  #group_by(tag) |>
  #summarise(regen = sum(regen)) |>
  ggplot(aes(x = tag, y = regen)) +
  geom_point() +
  labs(title = "regen über tag",
       x = "tag",
       y = "regen")+
  theme_minimal()
p


```

```{r echo=FALSE, message=FALSE, warning=FALSE}
p <- sharing |> 
  ggplot(aes(x = tag, y = temp)) +
  geom_point() +
  labs(title = "temp über tag",
       x = "tag",
       y = "temp")+
  theme_minimal()
p


```

```{r, echo=F, message=F, warning=F}
sharing |> 
  ggplot(aes(x = temp, y = user)) +
  geom_point() +
  geom_smooth(method = "gam") +
  labs(title = "Nutzerzahlen über temp",
       x = "temp",
       y = "Nutzer")+
  theme_minimal()
```
# Modellierung

```{r, echo=F, message=F, warning=F}
fit <- glm(user ~ temp + regen + feiertag + wochentag + stunde, data = sharing, family = poisson)
summary(fit)

par(mfrow=c(2,2))
plot(fit)

drop1(fit, test = "F")

```

```{r, echo=F, message=F, warning=F}
fit1 <- glm(user ~ temp + regen + feiertag + wochentag + stunde + tag, data = sharing, family = poisson)
summary(fit1)

par(mfrow=c(2,2))
plot(fit1)

drop1(fit1, test = "F")

```

```{r, echo=F, message=F, warning=F}
fit <- glm(user ~ temp + regen + feiertag + wochentag + stunde, data = sharing, family = quasipoisson)
summary(fit)

par(mfrow=c(2,2))
plot(fit)

drop1(fit, test = "F")

```


```{r, echo=F, message=F, warning=F}
fit <- 
  sharing %>% 
  na.omit() %>% 
  glm(user ~ temp:stunde + log(regen + 1) + feiertag:stunde + wochentag:stunde, data = ., family = poisson)

summary(fit)

par(mfrow=c(2,2))
plot(fit)

drop1(fit, test = "F")

```

```{r, echo=F, message=F, warning=F}
library(MASS)
fit <- 
  sharing %>% 
  na.omit() %>% 
  glm.nb(user ~ temp + regen + feiertag + wochentag + stunde, data = .)

summary(fit)

par(mfrow=c(2,2))
plot(fit)

drop1(fit, test = "Chisq")

```


```{r, echo=F, message=F, warning=F}
library(MASS)
fit.i <- 
  sharing %>% 
  na.omit() %>% 
  glm.nb(user ~ temp + regen + feiertag + wochentag * stunde, data = .)

summary(fit.i)

par(mfrow=c(2,2))
plot(fit.i)

drop1(fit.i, test = "Chisq")
```


```{r, echo=F, message=F, warning=F}
anova(fit, fit.i, test = "LRT")
```



```{r, echo=F, message=F, warning=F}
library(MASS)
fit <- 
  sharing %>% 
  na.omit() %>% 
  glm.nb(user ~ temp * stunde + regen + feiertag + wochentag + stunde, data = .)

summary(fit)

par(mfrow=c(2,2))
plot(fit)

drop1(fit, test = "F")

```
```{r, echo=F, message=F, warning=F}
library(MASS)
fit.ii <- 
  sharing %>% 
  na.omit() %>% 
  glm.nb(user ~ temp * stunde + regen + feiertag + wochentag * stunde, data = .)

summary(fit)

par(mfrow=c(2,2))
plot(fit)

drop1(fit, test = "F")
```


```{r, echo=F, message=F, warning=F}
anova(fit, fit.i, fit.ii, fit.f, test = "LRT")
```


```{r, echo=F, message=F, warning=F}
anova(fit.f, fit.ii, fit.i, fit, test = "LRT")
```


```{r, echo=F, message=F, warning=F}
library(MASS)
sharing.f <- 
  sharing |>  
  na.omit()  |> 
  filter(row_number() != c(1512)) |>
  filter(row_number() != c(1320))
  # mutate(stunde = as.factor(stunde))
 
fit.f <- glm.nb(user ~ temp * stunde + regen + feiertag + wochentag * stunde, data = sharing.f)

summary(fit.f)

par(mfrow=c(2,2))
plot(fit.f)

drop1(fit.f, test = "Chisq")

```

```{r, echo=F, message=F, warning=F}
library(MASS)
fit.ff <- glm.nb(user ~ (temp + regen + feiertag + wochentag + stunde)^2, data = sharing.f)

summary(fit.ff)

par(mfrow=c(2,2))
plot(fit.ff)

drop1(fit.ff, test = "Chisq")

```

```{r, echo=F, message=F, warning=F}
library(MASS)
fit.fff <- glm.nb(user ~ temp * regen + feiertag * stunde + wochentag * stunde, data = sharing.f)

summary(fit.fff)

par(mfrow=c(2,2))
plot(fit.fff)

drop1(fit.fff, test = "Chisq")

```

```{r, echo=F, message=F, warning=F}
library(MASS)
sharing.ff <- 
  sharing |>  
  na.omit()  |> 
  filter(row_number() != c(1512)) |>
  filter(row_number() != c(1320)) |> 
  mutate(sin_stunde = sin(2 * pi * stunde / 24),
         cos_stunde = cos(2 * pi * stunde / 24),
         sin_wochentag = sin(2 * pi * wochentag / 7),
         cos_wochentag = cos(2 * pi * wochentag / 7),
         regen_binary = ifelse(regen > 0, 1, 0))
  
 
fit.fffft <- glm(user ~ temp * cos_stunde + feiertag * cos_stunde + wochentag * (sin_stunde + cos_stunde) + regen + cos(2*pi*tag/163), data = sharing.ff)

s <- summary(fit.fffft)
s
1-s$deviance/s$null.deviance

par(mfrow=c(2,2))
plot(fit.fffft)

drop1(fit.fffft, test = "Chisq")


fit.fffftr <- glm(user ~ temp * cos_stunde + feiertag * cos_stunde + wochentag * (sin_stunde + cos_stunde) + regen_binary + cos(2*pi*tag/163), data = sharing.ff)

s <- summary(fit.fffftr)
s
1-s$deviance/s$null.deviance

par(mfrow=c(2,2))
plot(fit.fffftr)

drop1(fit.fffftr, test = "Chisq")

fit.fffftr <- glm(user ~ temp * (cos_stunde + sin_stunde) + feiertag * (cos_stunde + sin_stunde) + wochentag * (sin_stunde + cos_stunde) + regen_binary + cos(2*pi*tag/365), data = sharing.ff, family = poisson)

s <- summary(fit.fffftr)
s
1-s$deviance/s$null.deviance

par(mfrow=c(2,2))
plot(fit.fffftr)

drop1(fit.fffftr, test = "Chisq")

fit.fffftrd <- glm(user ~ temp * (cos_stunde + sin_stunde) + feiertag * (cos_stunde + sin_stunde) + wochentag * (sin_stunde + cos_stunde) + regen_binary + cos(2*pi*tag/163), data = sharing.ff, family = poisson)

s <- summary(fit.fffftrd)
s
1-s$deviance/s$null.deviance

par(mfrow=c(2,2))
plot(fit.fffftrd)

drop1(fit.fffftrd, test = "Chisq")

fit.ffffnb <- glm.nb(user ~ temp * (cos_stunde + sin_stunde) + feiertag * (cos_stunde + sin_stunde) + wochentag * (sin_stunde + cos_stunde) + regen_binary + cos(2*pi*tag/180), data = sharing.ff)

s <- summary(fit.ffffnb)
s
1-s$deviance/s$null.deviance

par(mfrow=c(2,2))
plot(fit.ffffnb)

drop1(fit.ffffnb, test = "Chisq")
```
```{r}
# Vorhersagen berechnen
sharing.ff$predicted_user <- predict(fit.fffftrd, type = "response")

# Streudiagramm: Beobachtete vs. Vorhergesagte Werte
ggplot(sharing.ff, aes(x = predicted_user, y = user)) +
  geom_point(alpha = 0.3) +
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
  labs(x = "Vorhergesagte Werte", y = "Beobachtete Werte", title = "Vorhergesagte vs. Beobachtete Werte")

```


```{r}
# Residuen berechnen
sharing.ff$residuals <- residuals(fit.fffft, type = "pearson")

# Residuenplot gegen die Vorhersagen
ggplot(sharing.ff, aes(x = predicted_user, y = residuals)) +
  geom_point(alpha = 0.3) +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(x = "Vorhergesagte Werte", y = "Residuen", title = "Residuen vs. Vorhergesagte Werte")

```

