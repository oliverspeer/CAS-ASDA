# Übungsblatt 1 {.unnumbered}

---
title:  "Übungsblatt 1"
author: "Marcel Dettling"
date:   "`r Sys.Date()`"
editor: source
lang: de
language: 
  title-block-author-single: "Autor"
  title-block-published: "Version vom"
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
    theme: sandstone
    fig-width: 8
    fig-height: 6
    fig-align: "center"
    fig-caption: true
    df-print: kable
    highlight: "monochrome"
---

```{css, echo = FALSE}
.justify {
  text-align: justify
}
```

## Aufgabe 1 {.justify}

Im File `autodistanz.rda` finden sie von 82 Männern ihr Alter und die durchschnittlich im Jahr 2014 zurückgelegte Tagesdistanz mit dem Auto. Es handelt sich dabei allesamt um Männer, die selbst ein Auto besitzen und dieses auch fahren.

```{r}
load("autodistanz.rda")
```

### Teilaufgabe a)

Stellen sie die Daten geeignet in einem Scatterplot dar, und legen sie einen Loess-Glätter hinein, um den Zusammenhang zwischen der Zielgrösse `distanz` und dem Prädiktor `alter` zu visualisieren.

```{r}
library(tidyverse)
ggplot(autodistanz, aes(alter, distanz)) +
  geom_point() +
  geom_smooth(method = "loess", span = 0.55)

ggplot(autodistanz, aes(alter, log(distanz))) +
  geom_point() +
  geom_smooth(method = "loess", span = 0.55) 


```

[Varianz ist heterogen verteilt. daher Log-Transformation ausprobieren.]{style="color:#00008B; font-weight:bold"}

### Teilaufgabe b)

Verwenden sie nun anstelle des Loess-Glätters ein geeignetes Polynom, welches ihnen den Zusammenhang zwischen den beiden Grössen schätzt.
```{r}
library(tidyverse)
ggplot(autodistanz, aes(alter, distanz)) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ poly(x, 4))
    
fit <- lm(distanz ~ poly(alter, 4), data = autodistanz)
summary(fit)


par(mfrow = c(2, 2))
plot(fit)

fit.log <- lm(log(distanz) ~ poly(alter, 4), data = autodistanz)
summary(fit.log)

par(mfrow = c(2, 2))
plot(fit.log)

ggplot(autodistanz, aes(alter, log(distanz))) +
  geom_point() +
  geom_smooth(method = "lm", formula = y ~ poly(x, 4))


ggplot(autodistanz, aes(alter, log(distanz))) +
  geom_point() +
  geom_smooth(method = "gam", formula = y ~ s(x))
```


### Teilaufgabe c)

Anstelle des Polynoms sollen sie nun ein Modell mit kubischen Splines anpassen. Verwenden sie dazu sowohl die Funktion `smooth.spline()` wie auch die Funktion `gam()` aus der `library(mgcv)` und plotten sie die Fits.

```{r, echo=F,eval=TRUE,message=FALSE, warning=FALSE}
library(mgcv)


fit.ss <- smooth.spline(autodistanz$alter, autodistanz$distanz, all.knots = TRUE)
summary(fit.ss)
fit.log.ss <- smooth.spline(autodistanz$alter, log(autodistanz$distanz), all.knots = TRUE)
summary(fit.log.ss)

plot(distanz ~ alter, data = autodistanz, pch = 20, main = "Distanz über Alter mit >>smoth.spline<< ")
lines(sort(autodistanz$alter), fitted(fit.ss)[order(autodistanz$alter)], col = "blue")
lines(sort(autodistanz$alter), exp(fitted(fit.log.ss))[order(autodistanz$alter)], col = "red")
legend("topright", c("norm", "log-Trans"), col = c("blue", "red"), cex = 0.8, lty = 1)

par(mfrow = c(2, 2))
plot(fit.ss)

par(mfrow = c(2, 2))
plot(fit.log.ss)
```

[nach log-Transformation wird der fit eher unruhig.]{style="color:#00008B; font-weight:bold"}

```{r, echo=F,eval=TRUE,message=FALSE, warning=FALSE}
fit.gam <- gam(distanz ~ s(alter), data = autodistanz)
summary(fit.gam)
plot(fit.gam, residuals = TRUE, col = "blue", shade = TRUE, pch = 20 )
par(mfrow = c(2, 2))
gam.check(fit.gam, rep = 100, pch = 20)
```
[In den Diagnose-Plots zeigt sich, dass die Varianz nicht konstant ist, daher zeigt sich im qq-plot eine Abweichung. auch werden die Residuen mit zunehmendem fitted value grösser. Eine log-Transformation ist angezeigt.]{style="color:#00008B; font-weight:bold"} 

```{r, echo=F,eval=TRUE,message=FALSE, warning=FALSE}
fit.gam.log <- gam(log(distanz) ~ s(alter), data = autodistanz)
summary(fit.gam.log)
plot(fit.gam.log, residuals = TRUE, col = "blue", shade = TRUE, pch = 20 )
par(mfrow = c(2, 2))
gam.check(fit.gam.log, rep = 100, pch = 20)


plot(distanz ~ alter, data = autodistanz, pch = 20, main = "Distanz über Alter mit <<gam>>")
lines(sort(autodistanz$alter), fitted(fit.gam)[order(autodistanz$alter)], col = "blue")
lines(sort(autodistanz$alter), exp(fitted(fit.gam.log))[order(autodistanz$alter)], col = "red")
legend("topright", c("norm", "log-Trans"), col = c("blue", "red"), cex = 0.8, lty = 1)

```

[Nach log-Transformation sieht der Fit und die Residuen vernünftig aus]{style="color:#00008B; font-weight:bold"}


### Teilaufgabe d)

*(Advanced)* Lösen sie die Aufgabe mit Regression Splines. Setzen sie 4 Knoten, wobei die x-Werte geeignet nach Gutdünken gesetzt werden sollen. Programmieren sie dann einen stückweise konstanten Fit, einen der stückweise linear und kontinuierlich ist, sowie einen der 2x stetig differenzierbare, kubische Polynome verwendet.

```{r, echo=F,eval=TRUE,message=FALSE, warning=FALSE}
quantile(autodistanz$alter, c(.2, .4, .6, .8))

```

## Aufgabe 2 {.justify}

Die Zeitreihe `spt` im File `suhre_phostot.rda` enthält monatlich gemessene Phosphatwerte aus der Suhre im Kanton Luzern. Sie sollen diese Werte als Zielgrösse verwenden. Als Prädiktor wird die Zeit der Beobachtung verwendet, welche man via `time(spt)` extrahieren kann.

```{r, echo=F, eval=T}
load("suhre_phostot.rda")
plot(spt, type = "o",pch=20, main = "Phosphatwerte Suhre")

```

### Teilaufgabe a)

Passen sie mit der Funktion `gam()` einen Smoothing-Spline-Fit an, welcher die zeitliche Entwicklung der Phosphatwerte aufzeigt.
```{r, echo=F, eval=T, message=FALSE, warning=FALSE}
fit.gam <- gam(spt ~ s(time(spt)), data = spt)
summary(fit.gam)
plot(fit.gam, residuals = TRUE, col = "blue", shade = TRUE, pch = 20 )
```


### Teilaufgabe b)

Verwenden sie stattdessen ein Modell, welches geeignete Transformationen der Zeit-Variable verwendet, um ebenfalls die zeitliche Entwicklung der Phosphatwerte anzugeben. **Hinweis:** *die Zeitreihe enthält einen linearen Trend sowie eine zyklische Saison-Komponente, welche mit einer Faktorvariable oder (besser!) mit einer harmonischen Schwingung modelliert wird.*

```{r, echo=F, eval=T, message=FALSE, warning=FALSE}
fit <- lm(spt ~ time(spt) + sin(2*pi*time(spt)) + cos(2*pi*time(spt)), data = spt)
fit.gam <- gam(spt ~ s(time(spt)))
plot(spt, type = "o",pch=20, main = "Phosphatwerte Suhre")
lines(as.numeric(time(spt)), fitted(fit), col = "red")
lines(as.numeric(time(spt)), fitted(fit.gam), col = "blue")

par(mfrow = c(2, 2))
plot(fit)

```
