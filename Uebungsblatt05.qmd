# Übungsblatt 5 – Binomial-Regression {.unnumbered}

---
title:  "Übungsblatt 05 – Binomial-Regression "
author: "Marcel Dettling"
date:   "`r Sys.Date()`"
editor: source
lang: de
language: 
  title-block-author-single: "Autor:"
  title-block-published: "Version vom:"
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 3
    theme: sandstone
    fig-width: 8
    fig-height: 6
    fig-align: "center"
    fig-caption: true
    df-print: kable
    highlight: "monochrome"
---

```{css, echo = FALSE}
.justify {
  text-align: justify
}
```

## Aufgabe 1 {.justify}

In dieser Aufgabe soll der Datensatz `mobility.rda` mit Hilfe einer Binomial-Regression untersucht werden. Er beinhaltet 10'000 Beobachtungen von 8 Prädiktoren und der Zielvariable `churn`.

```{r, echo=F, eval=T}
load("mobility.rda")
```

### Teilaufgabe a)

Als ersten Schritt muss der Datensatz etwas vereinfacht werden. Bereiten sie die Faktorvariablen neu auf, und zwar wie folgt:

| Variable    | Aufbereitung                               |
|-------------|--------------------------------------------|
| `duration`  | `[0,5] Jahre`, `(5,10] Jahre`, `>10 Jahre` |
| `liability` | `never`, `expired`, `yes`                  |
| `age`       | `<30 Jahre`, `(30,65] Jahre`, `>65 Jahre`  |
| `payment`   | `other`, `payslip`                         |
| `n.loc.1k`  | `0`, `1-3`, `>3`                           |
| `n.r.11`    | `0`, `1-5`, `>5`                           |
| `n.loc.u`   | `0`, `1-5`, `>5`                           |

```{r, echo=F, eval=T, message=FALSE, warning=FALSE}
library(dplyr)
library(tidyr)
library(forcats)

mobilityn <- mobility |> 
  mutate( duration = fct_collapse(duration,
                      '[0, 5] Jahre' = levels(duration)[1:4],
                      '(5,10] Jahre' = levels(duration)[5:6],                                                        '>10 Jahre' = levels(duration)[7:8]),
          liability = fct_collapse(liability,
                      'never' = levels(liability)[1],
                      'expired' = levels(liability)[2:4],
                      'yes' = levels(liability)[5]),
          age = fct_collapse(age,
                      '<30 Jahre' = levels(age)[1],
                      '(30,65] Jahre' = levels(age)[2:4],
                      '>65 Jahre' = levels(age)[5]),
          payment = fct_collapse(payment,
                      'other' = levels(payment)[c(1,3,4)],
                      'payslip' = levels(payment)[2]),
          n.loc.1k = fct_collapse(n.loc.1k,
                      '0' = levels(n.loc.1k)[1],
                      '1-3' = levels(n.loc.1k)[2:3],
                      '>3' = levels(n.loc.1k)[4:6]),
          n.r.11 = fct_collapse(n.r.11,
                      '0' = levels(n.r.11)[1],
                      '1-5' = levels(n.r.11)[2:3],
                      '>5' = levels(n.r.11)[4:6]),
          n.loc.u = fct_collapse(n.loc.u,
                      '0' = levels(n.loc.u)[1],
                      '1-5' = levels(n.loc.u)[2:4],
                      '>5' = levels(n.loc.u)[5:7])
                                )
```


### Teilaufgabe b)

Aggregieren sie nun die Daten, so dass eine erste Binomial-Regression durchgeführt werden kann. Wie viele Merkmalskombinationen gibt es im Datensatz, und wie viele davon sind tatsächlich besetzt?

```{r, echo=F, eval=T}
dat <- mobilityn |> 
  group_by(duration, liability, gender, age, payment, n.loc.1k, n.r.11, n.loc.u) |> 
  count(churn) |>
  pivot_wider(names_from = churn, 
              values_from = n, 
              values_fill = 0,
              names_prefix = "churn.") |> 
  #rename(churn.yes = `churn.TRUE`, churn.no = `churn.FALSE`) |>
  mutate(churn = cbind(churn.TRUE, churn.FALSE)) |>
  select(-churn.TRUE, -churn.FALSE) |>
  ungroup()

dat$churn <- cbind(churn.yes = dat$churn[,1], churn.no = dat$churn[,2])

3*3*2*3*2*3^3 ## Total 2916 Zellen, 917 davon sind besetzt

fit <- glm(churn ~ ., data = dat, family = binomial)

```
davon sind 917 besetzt.

### Teilaufgabe c)

Liefert das Modell einen adäquaten Fit und ist es signifikant besser als das Nullmodell, welches allen Kunden dieselbe Churn-W'keit zuordnet? Antworten sie mit Angabe entsprechender Kenngrössen.

```{r, echo=F, eval=T}
summary(fit)
drop1(fit, test = "Chisq")

par(mfrow = c(2,2))
plot(fit)
```
##### globaler Test
```{r, echo=F, eval=T}
out <- fit |> summary() |> 
  (\(x) pchisq(x$null.deviance - x$deviance, x$df.null - x$df.residual, lower.tail = FALSE))()
out

```

### Teilaufgabe d)

Führen sie nun eine Rückwärts-Variablenselektion mit dem p-Wert als Kriterium aus, wobei sie einen geeigneten Test für die Entscheidungen verwenden. Achtung, bei Ausschluss einer Variablen muss die Aggregation der Daten jeweils ohne die entfernte Variable neu durchgeführt werden. Geben sie in jedem Schritt die Anzahl existierender und besetzter Merkmalskombinationen an und halten sie das jeweilige Modell fest.

#### 1) **-n.loc.1k**

```{r, echo=F, eval=T}
dat <- mobilityn |> 
  group_by(duration, liability, gender, age, payment, #n.loc.1k, 
           n.r.11, n.loc.u) |> 
  count(churn) |>
  pivot_wider(names_from = churn, 
              values_from = n, 
              values_fill = 0,
              names_prefix = "churn.") |> 
  #rename(churn.yes = `churn.TRUE`, churn.no = `churn.FALSE`) |>
  mutate(churn = cbind(churn.TRUE, churn.FALSE)) |>
  select(-churn.TRUE, -churn.FALSE) |>
  ungroup()

dat$churn <- cbind(churn.yes = dat$churn[,1], churn.no = dat$churn[,2])

fit <- glm(churn ~ ., data = dat, family = binomial)

summary(fit)
drop1(fit, test = "Chisq")

par(mfrow = c(2,2))
plot(fit)

```
##### globaler Test
```{r, echo=F, eval=T}
out <- fit |> summary() |> 
  (\(x) pchisq(x$null.deviance - x$deviance, x$df.null - x$df.residual, lower.tail = FALSE))()
out

```

#### 2) **-n.loc.u**
```{r, echo=F, eval=T}
dat <- mobilityn |> 
  group_by(duration, liability, gender, age, payment, #n.loc.1k, 
           n.r.11 #, n.loc.u
           ) |> 
  count(churn) |>
  pivot_wider(names_from = churn, 
              values_from = n, 
              values_fill = 0,
              names_prefix = "churn.") |> 
  #rename(churn.yes = `churn.TRUE`, churn.no = `churn.FALSE`) |>
  mutate(churn = cbind(churn.TRUE, churn.FALSE)) |>
  select(-churn.TRUE, -churn.FALSE) |>
  ungroup()

dat$churn <- cbind(churn.yes = dat$churn[,1], churn.no = dat$churn[,2])

fit <- glm(churn ~ ., data = dat, family = binomial)

summary(fit)
drop1(fit, test = "Chisq")

par(mfrow = c(2,2))
plot(fit)

```
##### globaler Test
```{r, echo=F, eval=T}
out <- fit |> summary() |> 
  (\(x) pchisq(x$null.deviance - x$deviance, x$df.null - x$df.residual, lower.tail = FALSE))()
out
```

#### 3) **-payment**
```{r, echo=F, eval=T}
dat <- mobilityn |> 
  group_by(duration, liability, gender, age, #payment, #n.loc.1k, 
           n.r.11#, n.loc.u
           ) |> 
  count(churn) |>
  pivot_wider(names_from = churn, 
              values_from = n, 
              values_fill = 0,
              names_prefix = "churn.") |> 
  #rename(churn.yes = `churn.TRUE`, churn.no = `churn.FALSE`) |>
  mutate(churn = cbind(churn.TRUE, churn.FALSE)) |>
  select(-churn.TRUE, -churn.FALSE) |>
  ungroup()

dat$churn <- cbind(churn.yes = dat$churn[,1], churn.no = dat$churn[,2])

fit <- glm(churn ~ ., data = dat, family = binomial)

summary(fit)
drop1(fit, test = "Chisq")

par(mfrow = c(2,2))
plot(fit)

```
##### globaler Test
```{r, echo=F, eval=T}
out <- fit |> summary() |> 
  (\(x) pchisq(x$null.deviance - x$deviance, x$df.null - x$df.residual, lower.tail = FALSE))()
out
```

[Für das finale Model `churn ~ duration + liability + gender + age + n.r.11`
ist im Residual vs Fitted Plot kein systematisches Problem erkennbar. Der Scale-Location Plot zeigt eine konstante Varianz der Residuen. 
Im Leverage Plot sind Aussreisser erkennbar. Diese beeinflussen jedoch die jeweilge Faktorvariable.
Der Globaltest zeigt einen sehr kleinen p-Wert, residual deviance und residual df sind 
fast gleich gross, daher kein Overdispersion.]{style="color:blue, style=bold"}



### Teilaufgabe e)

Prüfen sie erneut, ob das Modell einen adäquaten Fit liefert. Dazu gehören die entsprechenden Tests sowie eine Residuenanalyse.

### Teilaufgabe f)

Geben sie im nächsten Schritt an, welche Merkmalskombinationen die maximale und minimale Fitted Probability erhalten. Prüfen sie dann auch, welche Merkmalskombinationen am stärksten abweichen (d.h. das grösste positive bzw. negative Residuum haben). Geben sie jeweils auch an, wie viele Kunden in der entsprechenden Merkmalskombination sind und wie die Churn-Rate ist.

### Teilaufgabe g)

Erwägen sie nun das Hinzufügen von paarweisen Interaktionstermen. Verwenden sie die R-Funktion `step()` mit dem AIC-Kriterium. Notieren sie die R-Befehle und schreiben sie auf, welche Variablen aufgenommen werden.

### Teilaufgabe h)

Vergleichen sie nun die Resultate vom Haupteffekt- und vom Interaktionsmodell mit Hilfe von Lift Charts. In der ersten Version können sie diese Insample erzeugen. In einer zweiten Version erzeugen sie einen Out-of-Sample Liftchart, indem sie von den Initial 10'000 Kunden 2'000 für die Vorhersage zur Seite legen, die identifizierten Modelle auf den verbleibenden 8'000 Kunden neu anpassen und schliesslich die W'keiten für das Testsample vorhersagen.

### Teilaufgabe i)

Kommentieren sie die Resultate und treffen sie eine finale Entscheidung, welches Modell sie in der Praxis einsetzen würden.
